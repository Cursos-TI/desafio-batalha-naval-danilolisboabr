#include <stdio.h>
#include <string.h>

/* ===========================================================
   BATALHA NAVAL - NOVATO, AVENTUREIRO, MESTRE
   Autor: você :)
   Observações:
     - Não há entrada pelo teclado; os "inputs" são variáveis no código.
     - Tudo é impresso com printf.
     - Código organizado para manutenção e expansão.
   =========================================================== */

/* ------------------------------- */
/* Utilidades gerais (impressão)   */
/* ------------------------------- */

void printSeparator(const char *title) {
    printf("\n====================================\n");
    printf("%s\n", title);
    printf("====================================\n");
}

void printMatrixInt(const int *mat, int rows, int cols) {
    /* mat é tratado como ponteiro linear, com acesso via mat[i*cols + j] */
    for (int i = 0; i < rows; ++i) {
        for (int j = 0; j < cols; ++j) {
            printf("%d ", *((mat + i*cols) + j));
        }
        printf("\n");
    }
}

/* ===========================================================
   NIVEL NOVATO
   - Dois navios, um vertical e um horizontal
   - Coordenadas armazenadas em vetores 2D (Nx2)
   - Impressão das coordenadas
   =========================================================== */

void nivelNovato(void) {
    printSeparator("NIVEL NOVATO");

    /* Navio vertical (ex.: 3 segmentos) */
    const int lenV = 3;
    int navioV[lenV][2]; /* [linha][coluna] => (x,y) */
    int baseVX = 1, baseVY = 2; /* posição inicial (x=linha, y=coluna) */

    for (int i = 0; i < lenV; ++i) {
        navioV[i][0] = baseVX + i; /* x incrementa para vertical */
        navioV[i][1] = baseVY;     /* y fixo */
    }

    /* Navio horizontal (ex.: 4 segmentos) */
    const int lenH = 4;
    int navioH[lenH][2];
    int baseHX = 6, baseHY = 0;

    for (int j = 0; j < lenH; ++j) {
        navioH[j][0] = baseHX;     /* x fixo */
        navioH[j][1] = baseHY + j; /* y incrementa para horizontal */
    }

    printf("Coordenadas do Navio Vertical (len=%d):\n", lenV);
    for (int i = 0; i < lenV; ++i) {
        printf("  (%d, %d)\n", navioV[i][0], navioV[i][1]);
    }

    printf("\nCoordenadas do Navio Horizontal (len=%d):\n", lenH);
    for (int j = 0; j < lenH; ++j) {
        printf("  (%d, %d)\n", navioH[j][0], navioH[j][1]);
    }
}

/* ===========================================================
   NIVEL AVENTUREIRO
   - Tabuleiro 10x10
   - 4 navios (horizontal, vertical e dois diagonais)
   - 0 = vazio / 3 = parte de navio
   =========================================================== */

#define N10 10
#define VAZIO 0
#define NAVIO 3

/* posiciona um segmento linear genérico com delta (dx,dy) */
void placeLinear(int board[N10][N10], int x, int y, int len, int dx, int dy) {
    for (int k = 0; k < len; ++k) {
        int nx = x + dx * k;
        int ny = y + dy * k;
        if (nx >= 0 && nx < N10 && ny >= 0 && ny < N10) {
            board[nx][ny] = NAVIO;
        }
    }
}

void printBoard10(const int b[N10][N10]) {
    for (int i = 0; i < N10; ++i) {
        for (int j = 0; j < N10; ++j) {
            printf("%d ", b[i][j]);
        }
        printf("\n");
    }
}

void nivelAventureiro(void) {
    printSeparator("NIVEL AVENTUREIRO");

    int board[N10][N10];
    /* zera o tabuleiro */
    for (int i = 0; i < N10; ++i)
        for (int j = 0; j < N10; ++j)
            board[i][j] = VAZIO;

    /* 4 navios, exemplo de comprimentos */
    int lenH = 5, lenV = 4, lenD1 = 4, lenD2 = 3;

    /* horizontal: dx=0, dy=1 */
    placeLinear(board, 2, 2, lenH, 0, 1);

    /* vertical: dx=1, dy=0 */
    placeLinear(board, 0, 7, lenV, 1, 0);

    /* diagonal para baixo e direita: dx=1, dy=1 */
    placeLinear(board, 5, 1, lenD1, 1, 1);

    /* diagonal para cima e direita: dx=-1, dy=1 */
    placeLinear(board, 9, 0, lenD2, -1, 1);

    printf("Tabuleiro 10x10 (0=vazio, 3=navio):\n");
    printBoard10(board);
}

/* ===========================================================
   NIVEL MESTRE
   - Matrizes de habilidades (cone, cruz, octaedro)
   - 0 = não afetado / 1 = afetado
   - Padrões gerados com laços aninhados
   =========================================================== */

#define N5 5

void clearMatrix(int m[N5][N5]) {
    for (int i = 0; i < N5; ++i)
        for (int j = 0; j < N5; ++j)
            m[i][j] = 0;
}

/* Cone apontando para baixo; topo no centro da primeira linha */
void habilidade_cone(int m[N5][N5]) {
    clearMatrix(m);
    int c = N5 / 2; /* centro da coluna */
    for (int i = 0; i <= c; ++i) {
        int start = c - i;
        int end   = c + i;
        for (int j = start; j <= end; ++j) {
            m[i][j] = 1;
        }
    }
    /* Observação: linhas abaixo de 'c' ficam zeradas.
       O exemplo do enunciado mostra só as 3 primeiras linhas. */
}

/* Cruz: linha e coluna centrais */
void habilidade_cruz(int m[N5][N5]) {
    clearMatrix(m);
    int c = N5 / 2;
    for (int i = 0; i < N5; ++i) {
        m[i][c] = 1; /* coluna central */
        m[c][i] = 1; /* linha central */
    }
}

/* Octaedro (diamante) com raio 1 ao redor do centro */
void habilidade_octaedro(int m[N5][N5]) {
    clearMatrix(m);
    int c = N5 / 2;
    int raio = 1; /* distância Manhattan <= 1 */
    for (int i = 0; i < N5; ++i) {
        for (int j = 0; j < N5; ++j) {
            int manhattan = (i > c ? i - c : c - i) + (j > c ? j - c : c - j);
            if (manhattan <= raio) {
                m[i][j] = 1;
            }
        }
    }
}

void nivelMestre(void) {
    printSeparator("NIVEL MESTRE");

    int cone[N5][N5], cruz[N5][N5], oct[N5][N5];

    habilidade_cone(cone);
    habilidade_cruz(cruz);
    habilidade_octaedro(oct);

    printf("Habilidade: CONE (N=%d)\n", N5);
    printMatrixInt(&cone[0][0], N5, N5);

    printf("\nHabilidade: CRUZ (N=%d)\n", N5);
    printMatrixInt(&cruz[0][0], N5, N5);

    printf("\nHabilidade: OCTAEDRO (N=%d)\n", N5);
    printMatrixInt(&oct[0][0], N5, N5);
}

/* ===========================================================
   main: executa os três níveis na sequência
   =========================================================== */
int main(void) {
    nivelNovato();
    nivelAventureiro();
    nivelMestre();
    return 0;
}
